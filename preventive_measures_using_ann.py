# -*- coding: utf-8 -*-
"""Preventive Measures using ANN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rTM4Y-96-jNAC4Aetj9nBcBqrfsfprds
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load the dataset
file_path = '/content/Final dataset for cts (1).csv'
data = pd.read_csv(file_path)

# Dropping the irrelevant column
data = data.drop(columns=['Unnamed: 15'])

# Encoding categorical variables
label_encoders = {}
categorical_columns = ['Gender', 'Exercise Frequency', 'BMI_numeric']

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Normalizing numerical variables
scaler = StandardScaler()
numerical_columns = ['Age', 'BMI']

data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

# Creating a function for rule-based recommendations
def generate_recommendations(row):
    recommendations = []

    # Smoking
    if row['Smoke'] == 1:
        recommendations.append("Quit smoking.")

    # Alcohol
    if row['Alcohol'] == 1:
        recommendations.append("Reduce or quit alcohol consumption.")

    # Exercise Frequency
    if row['Exercise Frequency'] == 3:
        recommendations.append("Exercise regularly.")
    elif row['Exercise Frequency'] == 2:
        recommendations.append("Increase exercise frequency.")
    elif row['Exercise Frequency'] == 1:
        recommendations.append("Maintain or increase exercise frequency.")

    # BMI
    if row['BMI'] > 35:
        recommendations.append("Exercise regularly and maintain a proper diet.")
    elif row['BMI'] > 25:
        recommendations.append("Maintain current weight or lose a little.")

    # BMI_numeric
    if row['BMI_numeric'] == 1:
        recommendations.append("Eat healthy food.")
    elif row['BMI_numeric'] == 2:
        recommendations.append("Maintain a proper diet.")
    elif row['BMI_numeric'] == 3:
        recommendations.append("Maintain a proper diet and exercise regularly.")

    return "; ".join(recommendations)

# Apply the recommendation function to each row
data['Recommendations'] = data.apply(generate_recommendations, axis=1)

# Display the first few rows of the dataset with recommendations
print(data[['Diagnosis Score', 'Smoke', 'Alcohol', 'BMI', 'Exercise Frequency', 'BMI_numeric', 'Recommendations']].head())

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the dataset
file_path = '/content/Final dataset for cts (1).csv'
data = pd.read_csv(file_path)

# Dropping the irrelevant column
data = data.drop(columns=['Unnamed: 15'])

# Encoding categorical variables
label_encoders = {}
categorical_columns = ['Gender', 'Exercise Frequency', 'BMI_numeric']

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Normalizing numerical variables
scaler = StandardScaler()
numerical_columns = ['Age', 'BMI']

data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

# Creating a function for rule-based recommendations
def generate_recommendations(row):
    recommendations = []

    # Smoking
    if row['Smoke'] == 1:
        recommendations.append("Quit smoking.")

    # Alcohol
    if row['Alcohol'] == 1:
        recommendations.append("Reduce or quit alcohol consumption.")

    # Exercise Frequency
    if row['Exercise Frequency'] == 3:
        recommendations.append("Exercise regularly.")
    elif row['Exercise Frequency'] == 2:
        recommendations.append("Increase exercise frequency.")
    elif row['Exercise Frequency'] == 1:
        recommendations.append("Maintain or increase exercise frequency.")

    # BMI
    if row['BMI'] > 35:
        recommendations.append("Exercise regularly and maintain a proper diet.")
    elif row['BMI'] > 25:
        recommendations.append("Maintain current weight or lose a little.")

    # BMI_numeric
    if row['BMI_numeric'] == 1:
        recommendations.append("Eat healthy food.")
    elif row['BMI_numeric'] == 2:
        recommendations.append("Maintain a proper diet.")
    elif row['BMI_numeric'] == 3:
        recommendations.append("Maintain a proper diet and exercise regularly.")

    return "; ".join(recommendations)

# Apply the recommendation function to each row
data['Recommendations'] = data.apply(generate_recommendations, axis=1)

# Prepare data for ANN model
features = data.drop(columns=['Claimid', 'Patientid', 'AdmissionId', 'Diagnosis Code', 'Diagnosis Score', 'Recommendations'])
target = data['Diagnosis Score']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Build the ANN model
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.1)

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f'Model Loss: {loss}')

# Make predictions
predictions = model.predict(X_test)

# Display some sample predictions along with actual values
for i in range(5):
    print(f'Actual: {y_test.iloc[i]}, Predicted: {predictions[i][0]}')

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the dataset
file_path = '/content/Final dataset for cts (1).csv'
data = pd.read_csv(file_path)

# Selecting only the relevant columns
data = data[['Diagnosis Score', 'Smoke', 'Alcohol', 'BMI', 'Exercise Frequency', 'BMI_numeric']]

# Encoding categorical variables
label_encoders = {}
categorical_columns = ['Exercise Frequency', 'BMI_numeric']

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Normalizing numerical variables
scaler = StandardScaler()
data['BMI'] = scaler.fit_transform(data[['BMI']])

# Creating a function for rule-based preventive measures
def generate_preventive_measures(row):
    measures = []

    # Smoking
    if row['Smoke'] == 1:
        measures.append("Quit smoking.")

    # Alcohol
    if row['Alcohol'] == 1:
        measures.append("Reduce or quit alcohol consumption.")

    # Exercise Frequency
    if row['Exercise Frequency'] == 3:
        measures.append("Exercise regularly.")
    elif row['Exercise Frequency'] == 2:
        measures.append("Increase exercise frequency.")
    elif row['Exercise Frequency'] == 1:
        measures.append("Maintain or increase exercise frequency.")

    # BMI
    if row['BMI'] > 35:
        measures.append("Exercise regularly and maintain a proper diet.")
    elif row['BMI'] > 25:
        measures.append("Maintain current weight or lose a little.")

    # BMI_numeric
    if row['BMI_numeric'] == 1:
        measures.append("Eat healthy food.")
    elif row['BMI_numeric'] == 2:
        measures.append("Maintain a proper diet.")
    elif row['BMI_numeric'] == 3:
        measures.append("Maintain a proper diet and exercise regularly.")

    return "; ".join(measures)

# Apply the preventive measures function to each row
data['Preventive Measures'] = data.apply(generate_preventive_measures, axis=1)

# Prepare data for ANN model
features = data.drop(columns=['Diagnosis Score', 'Preventive Measures'])
target = data['Diagnosis Score']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Build the ANN model
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.1)

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f'Model Loss: {loss}')

# Make predictions
predictions = model.predict(X_test)

# Display some sample predictions along with actual values
for i in range(5):
    print(f'Actual: {y_test.iloc[i]}, Predicted: {predictions[i][0]}')

# Display the dataset with preventive measures
print(data.head())

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np

# Load the dataset
file_path = '/content/Final dataset for cts (1).csv'
data = pd.read_csv(file_path)

# Selecting only the relevant columns
data = data[['Diagnosis Score', 'Smoke', 'Alcohol', 'BMI', 'Exercise Frequency', 'BMI_numeric']]

# Encoding categorical variables
label_encoders = {}
categorical_columns = ['Exercise Frequency', 'BMI_numeric']

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Normalizing numerical variables
scaler = StandardScaler()
data['BMI'] = scaler.fit_transform(data[['BMI']])

# Creating a function for rule-based preventive measures
def generate_preventive_measures(row):
    measures = []

    # Smoking
    if row['Smoke'] == 1:
        measures.append("Quit smoking.")

    # Alcohol
    if row['Alcohol'] == 1:
        measures.append("Reduce or quit alcohol consumption.")

    # Exercise Frequency
    if row['Exercise Frequency'] == 3:
        measures.append("Exercise regularly.")
    elif row['Exercise Frequency'] == 2:
        measures.append("Increase exercise frequency.")
    elif row['Exercise Frequency'] == 1:
        measures.append("Maintain or increase exercise frequency.")

    # BMI
    if row['BMI'] > 35:
        measures.append("Exercise regularly and maintain a proper diet.")
    elif row['BMI'] > 25:
        measures.append("Maintain current weight or lose a little.")

    # BMI_numeric
    if row['BMI_numeric'] == 1:
        measures.append("Eat healthy food.")
    elif row['BMI_numeric'] == 2:
        measures.append("Maintain a proper diet.")
    elif row['BMI_numeric'] == 3:
        measures.append("Maintain a proper diet and exercise regularly.")

    return "; ".join(measures)

# Apply the preventive measures function to each row
data['Preventive Measures'] = data.apply(generate_preventive_measures, axis=1)

# Prepare data for ANN model
features = data.drop(columns=['Diagnosis Score', 'Preventive Measures'])
target = data['Diagnosis Score']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Build the ANN model
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.1)

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f'Model Loss: {loss}')

# Make predictions
predictions = model.predict(X_test)

# Calculate accuracy metrics
mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, predictions)

print(f'Mean Absolute Error (MAE): {mae}')
print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R² Score: {r2}')

# Display some sample predictions along with actual values
for i in range(5):
    print(f'Actual: {y_test.iloc[i]}, Predicted: {predictions[i][0]}')

# Display the dataset with preventive measures
print(data.head())

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
import numpy as np

# Load the dataset
file_path = '/content/Final dataset for cts (1).csv'
data = pd.read_csv(file_path)

# Selecting only the relevant columns
data = data[['Diagnosis Score', 'Smoke', 'Alcohol', 'BMI', 'Exercise Frequency', 'BMI_numeric']]

# Encoding categorical variables
label_encoders = {}
categorical_columns = ['Exercise Frequency', 'BMI_numeric']

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Normalizing numerical variables
scaler = StandardScaler()
data['BMI'] = scaler.fit_transform(data[['BMI']])

# Creating a function for rule-based preventive measures
def generate_preventive_measures(row):
    measures = []

    # Smoking
    if row['Smoke'] == 1:
        measures.append("Quit smoking.")

    # Alcohol
    if row['Alcohol'] == 1:
        measures.append("Reduce or quit alcohol consumption.")

    # Exercise Frequency
    if row['Exercise Frequency'] == 3:
        measures.append("Exercise regularly.")
    elif row['Exercise Frequency'] == 2:
        measures.append("Increase exercise frequency.")
    elif row['Exercise Frequency'] == 1:
        measures.append("Maintain or increase exercise frequency.")

    # BMI
    if row['BMI'] > 35:
        measures.append("Exercise regularly and maintain a proper diet.")
    elif row['BMI'] > 25:
        measures.append("Maintain current weight or lose a little.")

    # BMI_numeric
    if row['BMI_numeric'] == 1:
        measures.append("Eat healthy food.")
    elif row['BMI_numeric'] == 2:
        measures.append("Maintain a proper diet.")
    elif row['BMI_numeric'] == 3:
        measures.append("Maintain a proper diet and exercise regularly.")

    return "; ".join(measures)

# Apply the preventive measures function to each row
data['Preventive Measures'] = data.apply(generate_preventive_measures, axis=1)

# Prepare data for ANN model
features = data.drop(columns=['Diagnosis Score', 'Preventive Measures'])
target = data['Diagnosis Score']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Build the improved ANN model
model = Sequential()
model.add(Dense(128, input_dim=X_train.shape[1], activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.3))
model.add(Dense(64, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.3))
model.add(Dense(32, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.3))
model.add(Dense(1, activation='linear'))

optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=16, validation_split=0.1)

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f'Model Loss: {loss}')

# Make predictions
predictions = model.predict(X_test)

# Calculate accuracy metrics
mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, predictions)

print(f'Mean Absolute Error (MAE): {mae}')
print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R² Score: {r2}')

# Display some sample predictions along with actual values
for i in range(5):
    print(f'Actual: {y_test.iloc[i]}, Predicted: {predictions[i][0]}')

# Display the dataset with preventive measures
print(data.head())

pip install keras-tuner

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
import numpy as np
import keras_tuner as kt

# Load the dataset
file_path = '/content/Final dataset for cts (1).csv'
data = pd.read_csv(file_path)

# Selecting only the relevant columns
data = data[['Diagnosis Score', 'Smoke', 'Alcohol', 'BMI', 'Exercise Frequency', 'BMI_numeric']]

# Encoding categorical variables
label_encoders = {}
categorical_columns = ['Exercise Frequency', 'BMI_numeric']

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Normalizing numerical variables
scaler = StandardScaler()
data['BMI'] = scaler.fit_transform(data[['BMI']])

# Creating a function for rule-based preventive measures
def generate_preventive_measures(row):
    measures = []

    # Smoking
    if row['Smoke'] == 1:
        measures.append("Quit smoking.")

    # Alcohol
    if row['Alcohol'] == 1:
        measures.append("Reduce or quit alcohol consumption.")

    # Exercise Frequency
    if row['Exercise Frequency'] == 3:
        measures.append("Exercise regularly.")
    elif row['Exercise Frequency'] == 2:
        measures.append("Increase exercise frequency.")
    elif row['Exercise Frequency'] == 1:
        measures.append("Maintain or increase exercise frequency.")

    # BMI
    if row['BMI'] > 35:
        measures.append("Exercise regularly and maintain a proper diet.")
    elif row['BMI'] > 25:
        measures.append("Maintain current weight or lose a little.")

    # BMI_numeric
    if row['BMI_numeric'] == 1:
        measures.append("Eat healthy food.")
    elif row['BMI_numeric'] == 2:
        measures.append("Maintain a proper diet.")
    elif row['BMI_numeric'] == 3:
        measures.append("Maintain a proper diet and exercise regularly.")

    return "; ".join(measures)

# Apply the preventive measures function to each row
data['Preventive Measures'] = data.apply(generate_preventive_measures, axis=1)

# Prepare data for ANN model
features = data.drop(columns=['Diagnosis Score', 'Preventive Measures'])
target = data['Diagnosis Score']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

def build_model(hp):
    model = Sequential()
    model.add(Dense(units=hp.Int('units_1', min_value=32, max_value=512, step=32), activation='relu', input_dim=X_train.shape[1]))
    model.add(BatchNormalization())
    model.add(Dropout(rate=hp.Float('dropout_1', min_value=0.0, max_value=0.5, step=0.1)))

    for i in range(hp.Int('num_layers', 1, 3)):
        model.add(Dense(units=hp.Int(f'units_{i+2}', min_value=32, max_value=512, step=32), activation='relu'))
        model.add(BatchNormalization())
        model.add(Dropout(rate=hp.Float(f'dropout_{i+2}', min_value=0.0, max_value=0.5, step=0.1)))

    model.add(Dense(1, activation='linear'))

    model.compile(optimizer=Adam(learning_rate=hp.Float('learning_rate', min_value=1e-4, max_value=1e-2, sampling='LOG')),
                  loss='mean_squared_error')

    return model

# Initialize Keras Tuner
tuner = kt.RandomSearch(
    build_model,
    objective='val_loss',
    max_trials=20,
    executions_per_trial=3,
    directory='my_dir',
    project_name='hyperparam_tuning')

# Search for best hyperparameters
tuner.search(X_train, y_train, epochs=100, validation_split=0.1, verbose=1)

# Get the best model
best_model = tuner.get_best_models(num_models=1)[0]

# Evaluate the best model
loss = best_model.evaluate(X_test, y_test)
print(f'Model Loss: {loss}')

# Make predictions
predictions = best_model.predict(X_test)

# Calculate accuracy metrics
mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, predictions)

print(f'Mean Absolute Error (MAE): {mae}')
print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R² Score: {r2}')

# Display some sample predictions along with actual values
for i in range(5):
    print(f'Actual: {y_test.iloc[i]}, Predicted: {predictions[i][0]}')

# Display the dataset with preventive measures
print(data.head())